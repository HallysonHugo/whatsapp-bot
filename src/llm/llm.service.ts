import { Injectable } from '@nestjs/common';
import { OpenaiService } from './openai/openai.service';
import { ChatCompletionMessageParam } from 'openai/resources';
import { RasaService } from './rasa/rasa.service';

@Injectable()
export class LlmService {
    constructor(
      private readonly openaiService: OpenaiService,
      private readonly rasaService: RasaService
    ) { }


    private _prompt: string = `Voc√™ √© um assistente virtual de uma barbearia que se apresenta na primeira mensagem do usu√°rio. 
    Seu objetivo √© ajudar os clientes a agendar cortes de cabelo, verificar hor√°rios dispon√≠veis e fornecer informa√ß√µes sobre os servi√ßos oferecidos pelo sal√£o. 
    Se um cliente perguntar sobre hor√°rios dispon√≠veis, forne√ßa apenas os hor√°rios que est√£o livres, conforme os dados fornecidos. 
    Se perguntarem sobre servi√ßos, detalhe cada um com sua descri√ß√£o e pre√ßo. 
    Se perguntarem sobre o sal√£o, forne√ßa informa√ß√µes sobre a localiza√ß√£o, hor√°rio de funcionamento e formas de pagamento aceitas.`;


    private _promptAnalyse: string = `
    Seu objetivo √© analisar a mensagem do usu√°rio e identificar se ele est√° mencionando ou perguntando sobre uma data, um hor√°rio, um servi√ßo ou uma localiza√ß√£o. 
    Retorne a resposta no formato JSON, sem explica√ß√µes adicionais. Exemplos de resposta:

    - Se o usu√°rio mencionar uma data: {"data": "10/10/2022"}
    - Se o usu√°rio perguntar sobre datas dispon√≠veis: {"data": "pergunta"}
    - Se o usu√°rio mencionar um hor√°rio: {"horario": "14:30"}
    - Se o usu√°rio perguntar sobre hor√°rios dispon√≠veis: {"horario": "pergunta"}
    - Se o usu√°rio mencionar um servi√ßo: {"servico": "corte de cabelo"}
    - Se o usu√°rio perguntar sobre servi√ßos dispon√≠veis: {"servico": "pergunta"}
    - Se o usu√°rio mencionar uma localiza√ß√£o: {"localizacao": "Avenida Paulista, S√£o Paulo"}
    - Se o usu√°rio mencionar m√∫ltiplas informa√ß√µes: {"data": "10/10/2022", "horario": "14:30", "servico": "corte de cabelo"}

    Se nenhuma dessas informa√ß√µes for identificada, retorne um JSON vazio: {}.
    `;

    async analyseText(question: string) {
        const typeOfQuestion = await this.openaiService.botAnalyse(question, this._promptAnalyse);
        return this.extractData(typeOfQuestion ?? "");
    }


    async botResponseRasa(question: string) {
        const analyse = await this.rasaService.botResponseRasa(question);
        return analyse;
    }

    async botAnswer(question: string, messages: ChatCompletionMessageParam[], continue_prompt: string) {
        // Obt√©m os dados analisados
        const extractedData = await this.analyseText(question);

        // Formata as informa√ß√µes extra√≠das
        const formattedPrompt = this.formatToPrompt(extractedData);

        // Faz a requisi√ß√£o ao OpenAI com as informa√ß√µes adicionais
        return await this.openaiService.botAnswer(question, messages, formattedPrompt);
    }

    extractData(respostaBot: string): {
        data?: string[];
        horario?: string[];
        servico?: string[];
        localizacao?: string;
    } {
        try {
            const dados = JSON.parse(respostaBot);

            return {
                ...(dados.data ? { data: Array.isArray(dados.data) ? dados.data : [dados.data] } : {}),
                ...(dados.horario ? { horario: Array.isArray(dados.horario) ? dados.horario : [dados.horario] } : {}),
                ...(dados.servico ? { servico: Array.isArray(dados.servico) ? dados.servico : [dados.servico] } : {}),
                ...(dados.localizacao ? { localizacao: dados.localizacao } : {}),
            };
        } catch (error) {
            console.error("Erro ao analisar a resposta do bot:", error);
            return {};
        }
    }

    formatToPrompt(
        extractedData: { data?: string[]; horario?: string[]; servico?: string[]; localizacao?: string },
    ): string {
        const extractedInfo = `
${extractedData.data?.length ? `üìÖ Datas dispon√≠veis: ${extractedData.data.join(", ")}` : ""}
${extractedData.horario?.length ? `‚è∞ Hor√°rios dispon√≠veis: ${extractedData.horario.join(", ")}` : ""}
${extractedData.servico?.length ? `üíà Servi√ßos dispon√≠veis: ${extractedData.servico.join(", ")}` : ""}
${extractedData.localizacao ? `üìç Localiza√ß√£o: ${extractedData.localizacao}` : ""}
        `.trim(); // Remove espa√ßos extras

        return `
${this._prompt}
${extractedInfo ? `\nAqui est√£o algumas informa√ß√µes relevantes antes de responder:\n${extractedInfo}` : ""}
        `.trim();
    }
}