import { Injectable } from '@nestjs/common';
import { OpenaiService } from './openai/openai.service';
import { ChatCompletionMessageParam } from 'openai/resources';
import { RasaService } from './rasa/rasa.service';
import { ServicesModel } from 'src/services/schema/services.schema';

@Injectable()
export class LlmService {
  constructor(
    private readonly openaiService: OpenaiService,
    private readonly rasaService: RasaService,
  ) {}

  private _prompt: string = `Voc√™ √© um assistente virtual de uma barbearia que se apresenta na primeira mensagem do usu√°rio. 
    Seu objetivo √© ajudar os clientes a agendar cortes de cabelo, verificar hor√°rios dispon√≠veis e fornecer informa√ß√µes sobre os servi√ßos oferecidos pelo sal√£o. 
    Se um cliente perguntar sobre hor√°rios dispon√≠veis, forne√ßa apenas os hor√°rios que est√£o livres, conforme os dados fornecidos. 
    Se perguntarem sobre servi√ßos, detalhe cada um com sua descri√ß√£o e pre√ßo. 
    Se perguntarem sobre o sal√£o, forne√ßa informa√ß√µes sobre a localiza√ß√£o, hor√°rio de funcionamento e formas de pagamento aceitas.`;

  private _promptAnalyse: string = `
    Seu objetivo √© analisar a mensagem do usu√°rio e identificar se ele est√° mencionando ou perguntando sobre uma data, um hor√°rio, um servi√ßo ou uma localiza√ß√£o. 
    Retorne a resposta no formato JSON, sem explica√ß√µes adicionais. Exemplos de resposta:

    - Se o usu√°rio mencionar uma data: {"data": "10/10/2022"}
    - Se o usu√°rio perguntar sobre datas dispon√≠veis: {"data": "pergunta"}
    - Se o usu√°rio perguntar sobre datas para confirmar um agendamento: {"data": "pergunta para confirmar"}
    - Se o usu√°rio perguntar sobre alteras datas dispon√≠veis: {"data": "alterar"}
    - Se o usu√°rio confirmar o agendamento: {"data": "cancelar"}
    - Se o usu√°rio mencionar um hor√°rio: {"horario": "14:30"}
    - Se o usu√°rio confirmar um hor√°rio: {"horario": "confirmar"}
    - Se o usu√°rio quiser alterar um hor√°rio: {"horario": "alterar"}
    - Se o usu√°rio perguntar sobre hor√°rios dispon√≠veis: {"horario": "pergunta"}
    - Se o usu√°rio mencionar um servi√ßo: {"servico": "corte de cabelo"}
    - Se o usu√°rio perguntar sobre servi√ßos dispon√≠veis: {"servico": "pergunta"}
    - Se o usu√°rio mencionar uma localiza√ß√£o: {"localizacao": "Avenida Paulista, S√£o Paulo"}
    - Se o usu√°rio mencionar m√∫ltiplas informa√ß√µes: {"data": "10/10/2022", "horario": "14:30", "servico": "corte de cabelo"}

    Se nenhuma dessas informa√ß√µes for identificada, retorne um JSON vazio: {}.
    `;

  async analyseText(question: string) {
    const typeOfQuestion = await this.openaiService.botAnalyse(
      question,
      this._promptAnalyse,
    );
    // check if typeOfQuestion is a valid JSON string
    if (!typeOfQuestion || typeof typeOfQuestion !== 'string') {
      console.error('Resposta inv√°lida do OpenAI:', typeOfQuestion);
      return {};
    }
    return this.extractData(typeOfQuestion ?? '');
  }

  async botResponseRasa(question: string) {
    const analyse = await this.rasaService.botResponseRasa(question);
    return analyse;
  }

  async botAnswer(
    question: string,
    messages: ChatCompletionMessageParam[],
    continue_prompt: string,
  ) {
    const formattedPrompt = this.formatToPrompt(
      this.extractData(continue_prompt),
    );
    return await this.openaiService.botAnswer(
      question,
      messages,
      formattedPrompt,
    );
  }

  extractData(respostaBot: string): {
    data?: string[];
    horario?: string[];
    servico?: string[];
    localizacao?: string;
  } {
    try {
      const dados = JSON.parse(respostaBot);

      return {
        ...(dados.data
          ? { data: Array.isArray(dados.data) ? dados.data : [dados.data] }
          : {}),
        ...(dados.horario
          ? {
              horario: Array.isArray(dados.horario)
                ? dados.horario
                : [dados.horario],
            }
          : {}),
        ...(dados.servico
          ? {
              servico: Array.isArray(dados.servico)
                ? dados.servico
                : [dados.servico],
            }
          : {}),
        ...(dados.localizacao ? { localizacao: dados.localizacao } : {}),
      };
    } catch (error) {
      console.error('Erro ao analisar a resposta do bot:', error);
      return {};
    }
  }

  formatToPrompt(extractedData: {
    data?: any[];
    horario?: any[];
    servico?: any[];
    localizacao?: string;
  }): string {
    let extractedInfo = '';

    if (extractedData.data?.length) {
      extractedInfo = `üìÖ Datas dispon√≠veis: ${extractedData.data.join(', ')}`;
    }
    if (extractedData.horario?.length) {
      extractedInfo += `\n‚è∞ Hor√°rios dispon√≠veis: ${extractedData.horario.join(', ')}`;
    }
    if (extractedData.servico?.length) {
      const servicos = extractedData.servico.map((s) => {
        return `${s.title} - ${s.description} (R$ ${s.value})`;
      });
      extractedInfo += `\nüíà Servi√ßos dispon√≠veis: ${servicos.join(', ')}`;
    }
    if (extractedData.localizacao) {
      extractedInfo += `\nüìç Localiza√ß√£o: ${extractedData.localizacao}`;
    }
    // Remove espa√ßos extras e quebras de linha desnecess√°rias
    extractedInfo = extractedInfo.replace(/\n\s*\n/g, '\n').trim();
    // Formata o prompt final com as informa√ß√µes extra√≠das
    return `
${this._prompt}
${extractedInfo ? `\nAqui est√£o algumas informa√ß√µes relevantes antes de responder:\n${extractedInfo}` : ''}
        `.trim();
  }
}
